---
title: "Example using JobMsg"
format: html
---

# JobMsg 

```{python}
import json
from datetime import datetime

import boto3
from botocore.exceptions import BotoCoreError, ClientError

from scripts.docker import runtimes
from spacer import config
from spacer.extract_features import EfficientNetExtractor
from spacer.messages import DataLocation, ExtractFeaturesMsg, JobMsg
from spacer.storage import load_image, store_image
from spacer.tasks import process_job

```

- Set the bucket name and s3 client from secrets.json

```{python}
bucketname = 'pyspacer-test'

try:
    # Load the secret.json file
    with open('secrets.json', 'r') as f:
        secrets = json.load(f)

    # Create a session using the credentials from secrets.json
    s3_client = boto3.client(
        's3',
        region_name=secrets['AWS_REGION'],
        aws_access_key_id=secrets['AWS_ACCESS_KEY_ID'],
        aws_secret_access_key=secrets['AWS_SECRET_ACCESS_KEY']
    )
except (ClientError, BotoCoreError) as e:
    print(f"An AWS error occurred: {e}")
except json.JSONDecodeError as e:
    print(f"Error reading secrets.json: {e}")
except IOError as e:
    print(f"File error: {e}")
except Exception as e:
    print(f"An unexpected error occurred: {e}")
```

# JobMsg 

## Runtimes.py 

- Using S3 as storage for image

- Using a local file system for the extractor weights. 

- The rest is saved in memory.

```{python}
extractor_weights_filepath = "./efficientnet_b0_ver1.pt"
efficient_net_extractor = EfficientNetExtractor(
    data_locations=dict(
        weights=DataLocation("filesystem", str(extractor_weights_filepath)),
    ),
)
```

```{python}
job_msg = runtimes.make_job(
    nbr_rowcols=10,
    image_size=1000,
    image_key="images-annotated/23_7168.JPG",
    extractor=efficient_net_extractor,
)
```

```{python}
res = process_job(job_msg)
res
```



